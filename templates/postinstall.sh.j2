#!/bin/bash

## NETWORK
sed -i 's/enp1s0/eth0/g' /etc/network/interfaces

echo "" > /etc/resolv.conf

## ROOT SSH KEY
mkdir -p /root/.ssh
echo "{{ root_ssh_pubkey|safe }}" > /root/.ssh/authorized_keys
echo "{{ ssh_host_ed25519_key|safe }}" > /etc/ssh/ssh_host_ed25519_key
echo "{{ ssh_host_ed25519_key_pub|safe }}" > /etc/ssh/ssh_host_ed25519_key.pub

## VSOCK SSH
mkdir -p -m 0700 /usr/local/lib/systemd/system/
install -o root -g root -m 0600 /dev/stdin /usr/local/lib/systemd/system/vsock-sshd.socket <<EOF
[Unit]
Description=OpenBSD Secure Shell server over unix socket
Before=sockets.target
ConditionPathExists=!/etc/ssh/sshd_not_to_be_run

[Socket]
ListenStream=vsock::65022
socketUser=sshd
SocketGroup=nogroup
SocketMode=0600
Accept=yes

[Install]
WantedBy=sockets.target
EOF

install -o root -g root -m 0600 /dev/stdin /usr/local/lib/systemd/system/vsock-sshd@.service <<EOF
[Unit]
Description=OpenSSH per-connection server daemon (Unix socket)
Documentation=man:sshd(8) man:sshd_config(5)
Wants=sockets.target
After=sockets.target

[Service]
ExecStartPre=/usr/sbin/sshd -t
ExecStart=/usr/sbin/sshd -i
RuntimeDirectory=sshd
RuntimeDirectoryMode=0755
StandardInput=socket

[Install]
WantedBy=multi-user.target
EOF

systemctl enable vsock-sshd.socket
systemctl disable sshd
# To handle the UNKNOWN source
sed -i "s/localhost/localhost UNKNOWN/g" /etc/hosts

## GRUB
sed -i 's/^GRUB_CMDLINE_LINUX=""/GRUB_CMDLINE_LINUX="net.ifnames=0 biosdevname=0 boot=overlay fsck.mode=skip"/' /etc/default/grub
sed -i 's/^GRUB_TIMEOUT=5$/GRUB_TIMEOUT=0/' /etc/default/grub
update-grub

## INITRAMFS HOOK
echo "overlay" >> /etc/initramfs-tools/modules
install -m 0750 -o root -g root /dev/stdin /etc/initramfs-tools/scripts/overlay<<EOF
# Local filesystem mounting			-*- shell-script -*-

#
# This script overrides local_mount_root() in /scripts/local
# and mounts root as a read-only filesystem with a temporary (rw)
# overlay filesystem.
#

. /scripts/local

local_mount_root()
{
	local_top
	local_device_setup "\${ROOT}" "root file system"
	ROOT="\${DEV}"

	# Get the root filesystem type if not set
	if [ -z "\${ROOTFSTYPE}" ]; then
		FSTYPE=\$(get_fstype "\${ROOT}")
	else
		FSTYPE=\${ROOTFSTYPE}
	fi

	local_premount

	# CHANGES TO THE ORIGINAL FUNCTION BEGIN HERE
	# N.B. this code still lacks error checking

	modprobe \${FSTYPE}
	checkfs \${ROOT} root "\${FSTYPE}"

	if [ -b /dev/disk/by-label/overlay ] ; then

		mkdir -p /lower /upper

		# Mount read-only root to /lower
		if [ "\${FSTYPE}" != "unknown" ]; then
			mount -r -t \${FSTYPE} \${ROOTFLAGS} \${ROOT} /lower
		else
			mount -r \${ROOTFLAGS} \${ROOT} /lower
		fi

		# Mount a tmpfs for the overlay in /upper
		mount /dev/disk/by-label/overlay /upper
		mkdir -p /upper/data /upper/work

		# Loading overlay module
		modprobe overlay || insmod "/lower/lib/modules/\$(uname -r)/kernel/fs/overlayfs/overlay.ko"

		# Mount the final overlay-root in \$rootmnt
		mount -t overlay \
		    -olowerdir=/lower,upperdir=/upper/data,workdir=/upper/work \
		    overlay \${rootmnt}

	else

		# Mount read-only root to /lower
		if [ "\${FSTYPE}" != "unknown" ]; then
			mount -r -t \${FSTYPE} \${ROOTFLAGS} \${ROOT} \${rootmnt}
		else
			mount -r \${ROOTFLAGS} \${ROOT} \${rootmnt}
		fi

	fi
}
EOF

/usr/sbin/update-initramfs -u
